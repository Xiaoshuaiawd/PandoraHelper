name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, arm]
        goarm: [7]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: arm
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Install Go dependencies
      run: |
        go env -w GO111MODULE=on
        go mod tidy
        go mod download

    - name: Install UPX
      run: sudo apt-get install -y upx-ucl

    - name: Build binary
      run: |
        BUILD_DIR="PandoraHelper-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        mkdir -p "$BUILD_DIR"
        mkdir -p "$BUILD_DIR/data"
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="PandoraHelper.exe"
        else
          BINARY_NAME="PandoraHelper"
        fi
        
        if [ "${{ matrix.goarch }}" = "arm" ]; then
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=${{ matrix.goarm }} go build -ldflags="-s -w" -o "$BUILD_DIR/${BINARY_NAME}" ./cmd/server/main.go
        else
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o "$BUILD_DIR/${BINARY_NAME}" ./cmd/server/main.go
        fi
        
        if [ "${{ matrix.goos }}" != "windows" ] || [ "${{ matrix.goarch }}" != "arm" ]; then
          upx "$BUILD_DIR/${BINARY_NAME}"
        fi
        
        cp -r data/config.json "$BUILD_DIR/data/"
        
        # 移动到builds目录
        mkdir -p builds
        mv "$BUILD_DIR" builds/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: PandoraHelper-${{ matrix.goos }}-${{ matrix.goarch }}
        path: builds/*
        retention-days: 1

  commit-builds:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: temp-builds

    - name: Prepare and commit builds
      run: |
        # 配置 Git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # 创建或清理 builds 目录
        mkdir -p builds
        rm -rf builds/*
        
        # 使用for循环处理每个构建目录
        for dir in temp-builds/*/; do
          platform=$(basename "$dir")
          echo "Processing platform: $platform"
          
          # 获取目录中的实际构建文件夹
          build_folder=$(find "$dir" -maxdepth 1 -type d -name "PandoraHelper-*" | head -n 1)
          
          if [ -n "$build_folder" ]; then
            echo "Found build folder: $build_folder"
            cp -r "$build_folder" builds/
          fi
        done
        
        # 列出所有复制的文件
        echo "Copied files:"
        ls -la builds/
        
        # 强制添加到 Git（忽略 .gitignore）
        git add -f builds/
        
        # 检查是否有变更
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update builds for ${{ github.ref_name }}"
          git push
        fi